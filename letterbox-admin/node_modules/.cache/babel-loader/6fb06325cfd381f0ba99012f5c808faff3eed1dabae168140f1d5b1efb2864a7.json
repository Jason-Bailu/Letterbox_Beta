{"ast":null,"code":"import { encrypt, decrypt } from '@/utils/jsencrypt';\nimport Cookie from 'js-cookie';\nimport router from '@/router';\nimport { setToken } from '@/utils/auth';\nimport { setRoutes } from '@/router';\nexport default {\n  name: \"LoginView\",\n  data() {\n    return {\n      user: {},\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 4,\n          max: 10,\n          message: '长度在 4 到 10 个字符',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 4,\n          max: 100,\n          message: '长度在 4 到 100 个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    this.getCookies();\n  },\n  methods: {\n    login() {\n      this.$refs['userForm'].validate(async valid => {\n        if (valid) {\n          // this.axios.post('/user/login', this.user).then(res => {\n          //   let result = res.data;\n          //   if (result.code === 'C200') {\n          //     localStorage.setItem('user', JSON.stringify(result.data));\n          //     setToken(result.data.token);\n          //     this.$message.success('登录成功');\n          //     this.$router.push('/');\n          //   } else {\n          //     this.$message.error('登录失败');\n          //   }\n          // })\n\n          //如果勾选了记住密码就要进行加密保存\n          if (this.user.rememberMe) {\n            Cookie.set(\"username\", this.user.username, {\n              expires: 30\n            });\n            Cookie.set(\"password\", encrypt(this.user.password), {\n              expires: 30\n            });\n            Cookie.set(\"rememberMe\", this.user.rememberMe, {\n              expires: 30\n            });\n          } else {\n            Cookie.remove(\"username\");\n            Cookie.remove(\"password\");\n            Cookie.remove(\"rememberMe\");\n          }\n          await this.axios.post('/login?username=' + this.user.username + '&password=' + this.user.password).then(res => {\n            let result = res.data;\n            console.log(result);\n            if (result.code === 'C200') {\n              setToken(result.data.token);\n              this.$store.commit(\"set_menus\", result.data.menus);\n              setRoutes();\n              this.$message.success(result.msg);\n              router.replace('/');\n            } else {\n              this.$message.error(result.msg);\n            }\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    getCookies() {\n      const username = Cookie.get(\"username\");\n      const password = Cookie.get(\"password\");\n      const rememberMe = Cookie.get(\"rememberMe\");\n      this.user = {\n        username: username === undefined ? this.user.username : username,\n        password: password === undefined ? this.user.password : decrypt(password),\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n      };\n    }\n  }\n};","map":{"version":3,"names":["encrypt","decrypt","Cookie","router","setToken","setRoutes","name","data","user","rules","username","required","message","trigger","min","max","password","created","getCookies","methods","login","$refs","validate","valid","rememberMe","set","expires","remove","axios","post","then","res","result","console","log","code","token","$store","commit","menus","$message","success","msg","replace","error","get","undefined","Boolean"],"sources":["src/views/LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div style=\"margin: 200px auto; background-color: #fff; width: 350px; height: 300px; padding: 20px; border-radius: 10px\">\n      <div style=\"margin: 20px 0; text-align: center; font-size: 24px\"><b>登录</b></div>\n      <el-form :model=\"user\" :rules=\"rules\" :ref=\"'userForm'\">\n        <el-form-item prop=\"username\">\n          <el-input size=\"medium\" placeholder=\"请输入用户名\" style=\"margin: 10px 0\" v-model=\"user.username\"></el-input>\n        </el-form-item>\n        <el-form-item prop=\"password\">\n          <el-input size=\"medium\" placeholder=\"请输入密码\" style=\"margin: 10px 0\" show-password v-model=\"user.password\"></el-input>\n        </el-form-item>\n        <el-checkbox v-model=\"user.rememberMe\" style=\"margin: 0px 0px 25px 0px;\">记住密码</el-checkbox>\n        <el-form-item style=\"margin: 10px 10px; text-align: right;\">\n          <el-button type=\"primary\" size=\"small\" autocomplete=\"off\" @click=\"login\">登录</el-button>\n          <el-button type=\"primary\" size=\"small\" autocomplete=\"off\" @click=\"$router.push('/register')\">注册</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { encrypt, decrypt } from '@/utils/jsencrypt';\nimport Cookie from 'js-cookie';\nimport router from '@/router';\nimport { setToken } from '@/utils/auth';\nimport { setRoutes } from '@/router';\n\nexport default {\n  name: \"LoginView\",\n  data() {\n    return {\n      user: {},\n      rules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          { min: 4, max: 10, message: '长度在 4 到 10 个字符', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          { min: 4, max: 100, message: '长度在 4 到 100 个字符', trigger: 'blur' }\n        ],\n      }\n    }\n  },\n  created() {\n    this.getCookies()\n  },\n  methods: {\n    login() {\n      this.$refs['userForm'].validate(async (valid) => {\n        if (valid) {\n          // this.axios.post('/user/login', this.user).then(res => {\n          //   let result = res.data;\n          //   if (result.code === 'C200') {\n          //     localStorage.setItem('user', JSON.stringify(result.data));\n          //     setToken(result.data.token);\n          //     this.$message.success('登录成功');\n          //     this.$router.push('/');\n          //   } else {\n          //     this.$message.error('登录失败');\n          //   }\n          // })\n\n          //如果勾选了记住密码就要进行加密保存\n          if (this.user.rememberMe) {\n            Cookie.set(\"username\", this.user.username, {expires: 30})\n            Cookie.set(\"password\", encrypt(this.user.password), {expires: 30})\n            Cookie.set(\"rememberMe\", this.user.rememberMe, {expires: 30})\n          } else {\n            Cookie.remove(\"username\")\n            Cookie.remove(\"password\")\n            Cookie.remove(\"rememberMe\")\n          }\n\n          await this.axios.post('/login?username='+this.user.username+'&password='+this.user.password).then(res => {\n            let result = res.data;\n            console.log(result);\n            if (result.code === 'C200') {\n              setToken(result.data.token);\n              this.$store.commit(\"set_menus\", result.data.menus);\n              setRoutes();\n              this.$message.success(result.msg);\n              router.replace('/');\n            } else {\n              this.$message.error(result.msg);\n            }\n          })\n        } else {\n          return false;\n        }\n      });\n    },\n    getCookies() {\n      const username = Cookie.get(\"username\")\n      const password = Cookie.get(\"password\")\n      const rememberMe = Cookie.get(\"rememberMe\")\n      this.user = {\n        username: username === undefined ? this.user.username : username,\n        password: password === undefined ? this.user.password : decrypt(password),\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.wrapper {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"../assets/bg.jpg\");\n  background-size: 100% 100%;\n}\n</style>\n"],"mappings":"AAsBA,SAAAA,OAAA,EAAAC,OAAA;AACA,OAAAC,MAAA;AACA,OAAAC,MAAA;AACA,SAAAC,QAAA;AACA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,KAAA;QACAC,QAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAG,QAAA,GACA;UAAAL,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAI,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACAC,MAAA;MACA,KAAAC,KAAA,aAAAC,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA,SAAAf,IAAA,CAAAgB,UAAA;YACAtB,MAAA,CAAAuB,GAAA,kBAAAjB,IAAA,CAAAE,QAAA;cAAAgB,OAAA;YAAA;YACAxB,MAAA,CAAAuB,GAAA,aAAAzB,OAAA,MAAAQ,IAAA,CAAAQ,QAAA;cAAAU,OAAA;YAAA;YACAxB,MAAA,CAAAuB,GAAA,oBAAAjB,IAAA,CAAAgB,UAAA;cAAAE,OAAA;YAAA;UACA;YACAxB,MAAA,CAAAyB,MAAA;YACAzB,MAAA,CAAAyB,MAAA;YACAzB,MAAA,CAAAyB,MAAA;UACA;UAEA,WAAAC,KAAA,CAAAC,IAAA,2BAAArB,IAAA,CAAAE,QAAA,uBAAAF,IAAA,CAAAQ,QAAA,EAAAc,IAAA,CAAAC,GAAA;YACA,IAAAC,MAAA,GAAAD,GAAA,CAAAxB,IAAA;YACA0B,OAAA,CAAAC,GAAA,CAAAF,MAAA;YACA,IAAAA,MAAA,CAAAG,IAAA;cACA/B,QAAA,CAAA4B,MAAA,CAAAzB,IAAA,CAAA6B,KAAA;cACA,KAAAC,MAAA,CAAAC,MAAA,cAAAN,MAAA,CAAAzB,IAAA,CAAAgC,KAAA;cACAlC,SAAA;cACA,KAAAmC,QAAA,CAAAC,OAAA,CAAAT,MAAA,CAAAU,GAAA;cACAvC,MAAA,CAAAwC,OAAA;YACA;cACA,KAAAH,QAAA,CAAAI,KAAA,CAAAZ,MAAA,CAAAU,GAAA;YACA;UACA;QACA;UACA;QACA;MACA;IACA;IACAxB,WAAA;MACA,MAAAR,QAAA,GAAAR,MAAA,CAAA2C,GAAA;MACA,MAAA7B,QAAA,GAAAd,MAAA,CAAA2C,GAAA;MACA,MAAArB,UAAA,GAAAtB,MAAA,CAAA2C,GAAA;MACA,KAAArC,IAAA;QACAE,QAAA,EAAAA,QAAA,KAAAoC,SAAA,QAAAtC,IAAA,CAAAE,QAAA,GAAAA,QAAA;QACAM,QAAA,EAAAA,QAAA,KAAA8B,SAAA,QAAAtC,IAAA,CAAAQ,QAAA,GAAAf,OAAA,CAAAe,QAAA;QACAQ,UAAA,EAAAA,UAAA,KAAAsB,SAAA,WAAAC,OAAA,CAAAvB,UAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}